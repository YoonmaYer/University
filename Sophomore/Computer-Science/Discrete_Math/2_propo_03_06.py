#### 2장 2.4 논리적 동치 관계 중 예제 2-16(슬라이드 34쪽)
#### ~(pvq)와 (~p)^(~q)가 논리적으로 동치임으로 파이썬으로 구현해 본다
#### 논리식의 "~"는 python에서는 "not"으로, "^"는 "and"로, "v"는 "or"로  표현한다

# 두 변수 p, q가 "T"와 "F"의 값을 갖는 부울형 변수 이므로 "True"와 "False"의
# 두 값을 취하는 리스트 형으로 선언한다
p, q = [True, False],  [True, False]

# p, q각 각기 True와 False 갖게 되어 이들 사이에는 모두 4개의 입력이 주어지는 경우를 고려하고
# 두식이 동치려면 이러한 4개의 경우에 모두 같은 값을 가져야 한다
# 이를 검사하기 위해 변수 flag(초기 값 0)를 두어 4개중 값이 다른 경우가 나올 때마다 1씩 증가하게 하여
# 최종적으로 falg == 0일때 두 식이 동치임을 출력하게 한다
flag = 0

# p와 q의 각 값의 변화에 따라 4가지 경우에 대해 주어진 두 식의 값을 구해 서로 같은지 비교한다
for i in range(2):
    for j in range(2):
        ## 주어진 두식을 다음과 같이 e1, e2로 표현한 후, 값을 구하고 비교한다
        e1, e2 = not(p[i] or q[j]), (not p[i]) and (not q[j])
        if e1 == e2: # 동치 
            print("p=", p[i], "  q=", q[j], "일 때   식 ~(pvq) =", e1, "이고,  식 (~p)^(~q) =", e2, "로 서로 같다")
        else:
            print("p=", p[i], "  q=", q[j], "일 때   식 ~(pvq) =", e1, "이고, 식 (~p)^(~q) =", e2, "로 서로 다르다")
            flag += 1

# 동치인지 flag 값을 검사해 판정한다
if flag == 0:
    print("\t따라서, 주어진 식 ~(pvq)와 (~p)^(~q)는 언제나 같은 값을 갖으므로 '동치'이다") #\t : 자동 들여쓰기(tab)
else:
    print("\t따라서, 주어진 식 ~(pvq)와 (~p)^(~q)는 서로 다른 값을 갖는 경우가 있어 '동치가 아니다'")
    
            
